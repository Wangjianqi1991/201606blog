#!/usr/bin/env node
//此脚本将要使用node来运行
/**
 * Module dependencies.
 */
//引用的文件
var app = require('../app');
//用来写日志 debug
var debug = require('debug')('201606blog:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 * 从环境变量中得到端口并且保存到express中
 * process 代表当前进程
 * env代表当前进程中的环境变量
 * 默认会获取环境变量中的端口号 查找不到默认是3000
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * 创建一个app服务器
 * app其实是一个函数 当请求到来的时候会执行此监听函数
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 * 监听提供的端口
 */

server.listen(port);
//当启动失败调用时报的监听
server.on('error', onError);
//成功的监听
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
